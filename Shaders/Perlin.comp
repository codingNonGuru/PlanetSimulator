#version 450
#extension GL_ARB_compute_variable_group_size: enable
#extension GL_ARB_gpu_shader_int64 : enable

layout (location = 0) uniform uint stage;
layout (location = 1) uniform ivec3 size;
layout (location = 2) uniform uint order;
layout (location = 3) uniform uint octaveCount;
layout (location = 4) uniform uint timeSeed;
layout (location = 5) uniform uint octaveIndex;
layout (location = 6) uniform vec2 range;
layout (location = 7) uniform float strongestOctave;
layout (location = 8) uniform float decay;
layout (location = 9) uniform float contrast;
layout (location = 10) uniform float contrastStrength;

layout (std430, binding = 0) buffer OCTAVES {
	float octaves[];
};

layout (std430, binding = 1) buffer RESULT {
	float result[];
};

layout (std430, binding = 2) buffer STREAM {
	float randomNumberStream[];
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

uint shuffle(uint seed) {
	seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

float getRandomValue(uint seed_x, float min, float max) {
	uint seed = shuffle(seed_x);
	
	float value = randomNumberStream[seed / 256] * (max - min) + min;
	return value;
	//return (randomNumberStream[seed_1 + timeSeed.x] + randomNumberStream[seed_2 + timeSeed.y]) * 0.5f;
}

float getRandomField(uint x, uint y, float min, float max) {
    uint seed = x * 1087;
    seed ^= 0xE56FAA12;
    seed += y * 2749;
    seed ^= 0x69628a2d;

	float value = float(int(seed % 2001) - 1000) / 1000.0f; 
    return value * (max - min) + min;
}

void setLatticeCore() {
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y; 
	uint index = y * size.x + x;
	uint shrinkedIndex = (y / order) * (((size.x - 1) / order) + 1) + x / order;
	
	uint highestXOrder = size.x;
	uint highestYOrder = size.y;
	//float variation = 1.0f / (1.0f + float(abs(octaveCount - octaveIndex)));
	float variation = 0.5f * exp(-pow(float(octaveCount - octaveIndex) - strongestOctave, 2.0f) / (2.0f * pow(decay, 2.0f)));
	bool isCorner = x % highestXOrder == 0 && y % highestYOrder == 0;
	bool isLowerOrRightEdge = x == highestXOrder || y == highestYOrder;
	if(x % order == 0 && y % order == 0) {
		if(isCorner == false && isLowerOrRightEdge == false) {
			octaves[index] = getRandomValue(timeSeed + shrinkedIndex, -variation, variation);
		}
		else if(isCorner == true){
			//octaves[index] = 0.0f;
		}
	} else {
		octaves[index] = 0.0f;
	}
}

void setLatticeEdges() {
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y; 
	uint index = y * size.x + x;
	
	uint highestXOrder = size.x - 1;
	uint highestYOrder = size.y - 1;
	if(x % order == 0 && y % order == 0) {
		if(x == highestXOrder)
			octaves[index] = octaves[y * size.x];
		if(y == highestYOrder)
			octaves[index] = octaves[x]; 
	} else {
		octaves[index] = 0.0f;
	}		
}

float fade(float t) {
 	return t * t * t * (t * (t * 6.0f - 15.0f) + 10.0f);
 	//return t * t * (3.0f - 2.0f * t);
}

void fillLattice() {
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y; 
	uint index = y * size.x + x;
	
	bool isOrder = x % order == 0 && y % order == 0; 
	if(isOrder == false) {
		uint left, right, up, down;
		left = x - x % order;
		right = left + order;
		if(right >= size.x) {
			right -= size.x;
			//right += 1;
		}
		up = y - y % order;
		down = up + order;
		if(down >= size.y) {
			down -= size.y;
			//down += 1;
		}
		float upperLeft, upperRight, lowerLeft, lowerRight;
		upperLeft = octaves[up * size.x + left];
		upperRight = octaves[up * size.x + right];
		lowerLeft = octaves[down * size.x + left];
		lowerRight = octaves[down * size.x + right];
		
		float horizontalFactor = float(x % order) / float(order);
		horizontalFactor = fade(horizontalFactor);
		float verticalFactor = float(y % order) / float(order);
		verticalFactor = fade(verticalFactor);
		
		float upperFactor = (upperRight - upperLeft) * horizontalFactor + upperLeft;
		float lowerFactor = (lowerRight - lowerLeft) * horizontalFactor + lowerLeft;
		float leftFactor = (lowerLeft - upperLeft) * verticalFactor + upperLeft;
		float rightFactor = (lowerRight - upperRight) * verticalFactor + upperRight;
	
		float verticalValue = (lowerFactor - upperFactor) * verticalFactor + upperFactor;
		float horizontalValue = (rightFactor - leftFactor) * horizontalFactor + leftFactor;
	
		octaves[index] = (verticalValue + horizontalValue) * 0.5f;
	}
	result[index] += octaves[index];
}

void addOctaves() {
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	uint index = y * size.x + x;

	result[index] = result[index] / float(octaveCount) + 0.5f;
	result[index] = pow(result[index], pow(contrastStrength, 16.0f * contrast - 16.0f * result[index]));
	result[index] = result[index] * (range.y - range.x) + range.x;
	/*if(result[index] > 0.5f)
		result[index] = 1.0f;
	else
		result[index] = 0.0f;*/
}

void clear() {
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	uint index = y * size.x + x;

	result[index] = 0.0f;
}

void main() {
	if(stage == 0)
		setLatticeCore();
	else if(stage == 1)
		setLatticeEdges();
	else if(stage == 2)
		fillLattice();
	else if(stage == 3)
		addOctaves();
	else if(stage == 4)
		clear();
}